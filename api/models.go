package main

import (
	"time"

	"github.com/alexander-cho/manager/api/internal/database"
	"github.com/google/uuid"
)

// create custom User type
type User struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	APIKey    string    `json:"api_key"`
}

// databaseUserToUser converts a database.User type generated by sqlc into a custom User type
// allowing for abstraction and control over the data structure within the app.
func databaseUserToUser(dbUser database.User) User {
	return User{
		ID:        dbUser.ID,
		CreatedAt: dbUser.CreatedAt,
		UpdatedAt: dbUser.UpdatedAt,
		Name:      dbUser.Name,
		APIKey:    dbUser.ApiKey,
	}
}

// create custom Entry type
type Entry struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Url       string    `json:"url"`
	UserID    uuid.UUID `json:"user_id"`
}

// databaseEntryToEntry converts a database.Entry type generated by sqlc into a custom Entry type
// allowing for abstraction and control over the data structure within the app.
func databaseEntryToEntry(dbEntry database.Entry) Entry {
	return Entry{
		ID:        dbEntry.ID,
		CreatedAt: dbEntry.CreatedAt,
		UpdatedAt: dbEntry.UpdatedAt,
		Name:      dbEntry.Name,
		Url:       dbEntry.Url,
		UserID:    dbEntry.UserID,
	}
}

func databaseEntriesToEntries(dbEntries []database.Entry) []Entry {
	entries := []Entry{}
	for _, dbEntry := range dbEntries {
		entries = append(entries, databaseEntryToEntry(dbEntry))
	}
	return entries
}
